---
# yamllint disable rule:line-length

- name: Make sure handlers are flushed immediately
  ansible.builtin.meta: flush_handlers

- name: Remove temporary SSH public key from server
  ansible.posix.authorized_key:
    user: "{{ system_user.stdout }}"
    key: "{{ hostvars['localhost']['dblab_tmp_ssh_key_result']['ssh_public_key'] }}"
    state: absent
  no_log: true  # do not output public key to the ansible log
  when:
    - system_user.stdout is defined
    - hostvars['localhost']['dblab_tmp_ssh_key_result']['ssh_public_key'] is defined

- block:
    - name: Save usage instructions to "{{ dblab_engine_base_path }}/usage_instructions.txt"
      ansible.builtin.copy:
        content: |
          1) Use SSH port forwarding for UI / API / CLI:
              ssh -o StrictHostKeyChecking=no -N -L {{ dblab_engine_ui_port }}:127.0.0.1:{{ dblab_engine_ui_port }} {{ inventory_hostname }}

          2) DBLab UI: http://127.0.0.1:{{ dblab_engine_ui_port }}

          3) Verification token (ensure to securely store it):
              {{ dblab_engine_verification_token }}

          4) DBLab API:
            - API URL: http://127.0.0.1:{{ dblab_engine_ui_port }}/api
            - API docs: https://api.dblab.dev/

          5) DBLab CLI:
            - CLI ('dblab') setup:
                export DBLAB_CLI_VERSION={{ dblab_engine_version }}
                curl -sSL dblab.sh | bash
                dblab init --environment-id={{ cli_environment_id }} --token={{ dblab_engine_verification_token }} --url=http://127.0.0.1:{{ dblab_engine_ui_port }}/api
            - CLI docs: https://cli-docs.dblab.dev/

          6) Monitoring:
            - SSH port forwarding:
                ssh -o StrictHostKeyChecking=no -N -L {{ netdata_port }}:127.0.0.1:{{ netdata_port }} {{ inventory_hostname }}
            - Monitoring URL: http://127.0.0.1:{{ netdata_port }}

          7) To connect to clones, also use SSH port forwarding. E.g., for clone 6000:
              ssh -o StrictHostKeyChecking=no -N -L 6000:127.0.0.1:6000 {{ inventory_hostname }}
            - and then use: 'host=127.0.0.1 port=6000 user=YOUR_USER dbname=postgres'

          (Optional) To destroy the DBLab server (for CLOUD, except BYOM):
            - add the 'state=absent' variable to the snippet you used for deploy the DBLab server.
            - run the command again to delete the server.
        dest: "{{ dblab_engine_base_path }}/usage_instructions.txt"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0644"

    - name: Read usage instructions
      ansible.builtin.command: "cat {{ dblab_engine_base_path }}/usage_instructions.txt"
      register: instructions_output
      changed_when: false

    - name: Print usage instructions
      ansible.builtin.debug:
        msg: "{{ instructions_output.stdout_lines }}"
  run_once: true
  tags: info, usage

...
