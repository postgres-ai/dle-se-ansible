---
# Dependencies
- name: Install python dependencies
  block:
    - name: Make sure the python3-pip package are present on controlling host
      package:
        name: python3-pip
        state: present
      delegate_to: 127.0.0.1
      run_once: true
      when: ansible_distribution != "MacOSX"

    - name: Install dopy dependency on controlling host
      pip:
        name: dopy
        extra_args: --user
      delegate_to: 127.0.0.1
      become: false
      vars:
        ansible_become: false
      run_once: true

# Create (if state or state is present)
- block:
    - name: "DigitalOcean: Ensure a SSH key {{ ssh_key_name }} is present"
      community.digitalocean.digital_ocean_sshkey_info:
        oauth_token: "{{ lookup('ansible.builtin.env', 'DO_API_TOKEN') }}"
      register: ssh_keys

    - name: "DigitalOcean: Get SSH Key Fingerprint"
      set_fact:
        ssh_key_fingerprint: "{{ item.fingerprint }}"
      no_log: true  # do not display the public key
      when: item.name == ssh_key_name | lower
      loop: "{{ ssh_keys.data | lower }}"

    - name: "DigitalOcean: Fail if the SSH key is not found"
      fail:
        msg: "SSH key {{ ssh_key_name }} not found. Please make sure that the key has been added to DigitalOcean."
      when: ssh_key_fingerprint is not defined

    - name: "DigitalOcean: Create or modify a Droplet ({{ server_name }})"
      community.digitalocean.digital_ocean_droplet:
        oauth_token: "{{ lookup('ansible.builtin.env', 'DO_API_TOKEN') }}"
        state: present
        name: "{{ server_name }}"
        unique_name: true
        size: "{{ server_type }}"
        region: "{{ server_location }}"
        image: "{{ server_image }}"
        ssh_keys: ["{{ ssh_key_fingerprint }}"]
        wait_timeout: 500
      register: droplet_result
  when: state == 'present'

- name: "DigitalOcean: Create or modify Block Storage ({{ volume_name }})"
  community.digitalocean.digital_ocean_block_storage:
    oauth_token: "{{ lookup('ansible.builtin.env', 'DO_API_TOKEN') }}"
    state: present
    command: create
    volume_name: "{{ volume_name }}"
    region: "{{ server_location }}"
    block_size: "{{ volume_size }}"
  register: block_storage_result
  when: state == 'present'

- name: "DigitalOcean: Attach Block Storage {{ volume_name }} to a Droplet {{ server_name }}"
  community.digitalocean.digital_ocean_block_storage:
    oauth_token: "{{ lookup('ansible.builtin.env', 'DO_API_TOKEN') }}"
    state: present
    command: attach
    volume_name: "{{ volume_name }}"
    region: "{{ server_location }}"
    droplet_id: "{{ droplet_result.data.droplet.id }}"
  when: droplet_result.data is defined

# Info
- name: Show Droplet info
  debug:
    msg:
      - Droplet ID is {{ droplet_result.data.droplet.id }}
      - Droplet OS is {{ droplet_result.data.droplet.image.description }}
      - Droplet Name is {{ server_name }}
      - Droplet Size is {{ server_type }}
      - Block Storage Size is {{ volume_size }} gigabytes
      - Public IP is {{ (droplet_result.data.droplet.networks.v4 | selectattr('type', 'equalto', 'public')).0.ip_address }}
      - Private IP is {{ (droplet_result.data.droplet.networks.v4 | selectattr('type', 'equalto', 'private')).0.ip_address }}
  when: droplet_result.data is defined

# set_fact: dle_host
- name: "set_fact: dle_host (for deploy DLE)"
  set_fact:
    dle_host: "root@{{ (droplet_result.data.droplet.networks.v4 | selectattr('type', 'equalto', 'public')).0.ip_address }}"
  when: droplet_result.data is defined

# Delete (if state or state is absent)
- name: "DigitalOcean: Delete a Droplet ({{ server_name }})"
  community.digitalocean.digital_ocean_droplet:
    oauth_token: "{{ lookup('ansible.builtin.env', 'DO_API_TOKEN') }}"
    state: absent
    name: "{{ server_name }}"
    unique_name: true
    region: "{{ server_location }}"
  when: state == 'absent'

- name: "DigitalOcean: Delete a Block Storage {{ volume_name }}"
  community.digitalocean.digital_ocean_block_storage:
    oauth_token: "{{ lookup('ansible.builtin.env', 'DO_API_TOKEN') }}"
    state: absent
    command: create
    volume_name: "{{ volume_name }}"
    region: "{{ server_location }}"
  when: state == 'absent'

...