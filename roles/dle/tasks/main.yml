---
- block:
  - name: Create configuration and logs directories
    file:
      dest: "{{ dir_item }}"
      state: directory
    loop:
      - "{{ dle_config_path }}"
      - "{{ dle_meta_path }}"
      - "{{ dle_logs_path }}"
      - "{{ dle_dump_location }}"
    loop_control:
      loop_var: dir_item

  # if dle_config_file is defined, copy the server.yml file
  - name: Copy DBLab configuration file to '{{ dle_config_path }}/server.yml'
    copy:
      src: "{{ dle_config_file }}"
      dest: "{{ dle_config_path }}/server.yml"
      owner: "{{ username }}"
      group: "{{ username }}"
      mode: 0644
    notify: "restart dblab_server"
    when:
      - dle_config_file is defined
      - dle_config_file | length > 0

  # if dle_config_file is not defined, generate a new server.yml from the jinja template
  - name: Generate DBLab configuration file '{{ dle_config_path }}/server.yml'
    template:
      src: templates/server.yml.j2
      dest: "{{ dle_config_path }}/server.yml"
      owner: "{{ username }}"
      group: "{{ username }}"
      mode: 0644
    notify: "restart dblab_server"
    when: dle_config_file is not defined or
          dle_config_file | length < 1

  - name: Create file 'pending.retrieval'
    file:
      path: "{{ dle_meta_path }}/pending.retrieval"
      state: touch
      owner: "{{ username }}"
      group: "{{ username }}"
      mode: u=rw,g=rw,o=rw
      modification_time: preserve
      access_time: preserve
    when: dle_config_file is not defined or
          dle_config_file | length < 1

- block:
    - name: Ensure that DBLab server container is running
      docker_container:
        name: "{{ dle_container_name }}"
        image: "{{ dle_image }}"
        state: started
        privileged: true
        restart_policy: unless-stopped
        container_default_behavior: "compatibility"
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - /var/lib/dblab:/var/lib/dblab/:rshared
          - "{{ dle_config_path }}:/home/dblab/configs"
          - "{{ dle_meta_path }}:/home/dblab/meta"
          - "{{ dle_logs_path }}:/home/dblab/logs"
          - "{{ dle_dump_location }}:{{ dle_dump_location }}"
          - /sys/kernel/debug:/sys/kernel/debug:rw
          - /lib/modules:/lib/modules:ro
          - /proc:/host_proc:ro
        ports:
          - "{{ dle_container_host }}:{{ dle_port }}:2345"
        env:
          DOCKER_API_VERSION: "1.39"
          DLE_COMPUTING_INFRASTRUCTURE: "{{ dle_computing_infrastructure }}"
      register: dblab_server_start

    - name: Wait for DBLab API port to be available
      wait_for:
        port: "{{ dle_port }}"
        host: "localhost"
        state: started
        timeout: 60
        delay: 10
      when: dblab_server_start is changed

    - name: Ensure DBLab API is healthy
      uri:
        url: "http://localhost:{{ dle_port }}/healthz"
      register: _result
      until: _result.status == 200
      retries: 10
      delay: 10

    - name: Ensure DBLab UI is available
      wait_for:
        port: "{{ dle_ui_port }}"
        host: "localhost"
        state: started
        timeout: 30
        delay: 10
      ignore_errors: false

...
