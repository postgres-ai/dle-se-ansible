---

- block:  # Create zpool
    - name: Check if ZFS pool is already exist
      command: "zpool status -v {{ zpool_name }}"
      register: zpool_status
      changed_when: false
      failed_when: false

    # If zpool_disk variable is not defined, try to detected an empty disk
    - name: Detect empty volume
      shell: |
        set -o pipefail;
        lsblk -e7 --output PATH,NAME,FSTYPE,TYPE --json \
          | jq -r '.blockdevices[] | select(.children == null and .fstype == null and .type == "disk") | .path'
      args:
        executable: /bin/bash
      register: zpool_volume
      changed_when: false
      when: zpool_status.rc != 0 and zpool_disk | length < 1

    # Stop, if empty volume is not detected
    - name: The empty volume is not detected
      fail:
        msg: "Whoops! The empty volume is not detected."
      when: zpool_volume.stdout is defined and zpool_volume.stdout | length < 1

    # If zpool_disk variable is not defined and empty disk is detected, use it
    - name: Create zpool (use {{ zpool_volume.stdout }})
      command: >-
        zpool create -f
        -O compression=on
        -O atime=off
        -O recordsize=128k
        -O logbias=throughput
        -m {{ zpool_mount_dir }}/{{ zpool_name }}
        {{ zpool_name }} {{ zpool_volume.stdout }}
      when: zpool_status.rc != 0 and (zpool_disk is not defined or zpool_disk | length < 1)

    # If zpool_disk variable is defined, use this disk
    - name: Create zpool (use {{ zpool_disk }})
      command: >-
        zpool create -f
        -O compression=on
        -O atime=off
        -O recordsize=128k
        -O logbias=throughput
        -m {{ zpool_mount_dir }}/{{ zpool_name }}
        {{ zpool_name }} {{ zpool_disk }}
      when: zpool_status.rc != 0 and (zpool_disk is defined and zpool_disk | length > 0)

    - name: "Check the number of datasets for the {{ zpool_name }}"
      shell: |
        set -o pipefail;
        zfs list -t filesystem | grep {{ zpool_name }} | grep -c dataset
      args:
        executable: /bin/bash
      register: datasets_number_result
      changed_when: false
      failed_when: false

    - name: Create datasets
      command: zfs create "{{ zpool_name }}/{{ item }}"
      with_sequence: start={{ datasets_number_result.stdout|int +1 }} count={{ zpool_datasets_number - datasets_number_result.stdout|int }} format=dataset_%d
      when: (zpool_status.rc != 0 and zpool_datasets_number > 0) or
            (zpool_status.rc == 0 and zpool_datasets_number > datasets_number_result.stdout|int)
  when:
    - zpool_name is defined
    - zpool_mount_dir is defined
    - zpool_datasets_number is defined
  tags:
    - zpool
...
